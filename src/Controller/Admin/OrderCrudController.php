<?php

namespace App\Controller\Admin;

use App\Entity\Order;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\CrudUrlGenerator;

class OrderCrudController extends AbstractCrudController
{

    private $entityManager;
    private $crudUrlGenerator;


    public function __construct(EntityManagerInterface $entityManager, CrudUrlGenerator $crudUrlGenerator)
    {
        $this->entityManager = $entityManager;
        $this->crudUrlGenerator = $crudUrlGenerator;
    }

    public static function getEntityFqcn(): string
    {
        return Order::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        $updatePreparation = Action::new('updatePreparation', 'Prépartion en cours','fas fa-box-open')->linkToCrudAction('updatePreparation');

        $updateDelivery = Action::new('updateDelivery', 'Livraison en cours', 'fas fa-truck')->linkToCrudAction('updateDelivery');
        ;
          //  ->setCssClass('update-state')
         //   ->linkToCrudAction('updatePreparation');

    //    $updateDelivery = Action::new('updateDelivery', 'Livraison en cours', 'fas fa-truck')

          //  ->setCssClass('update-state')
         //   ->linkToCrudAction('updateDelivery');

        return $actions
            ->add('detail', $updatePreparation)
            ->add('detail',$updateDelivery)
            ->add('index', 'detail');

           // ->remove(Crud::PAGE_DETAIL, Action::EDIT)
           // ->remove(Crud::PAGE_DETAIL, Action::DELETE)
           // ->remove(Crud::PAGE_INDEX, Action::NEW)
          //  ->remove(Crud::PAGE_INDEX, Action::EDIT)
          //  ->remove(Crud::PAGE_INDEX, Action::DELETE);
    }

    public function updatePreparation(AdminContext $Context)
    {
        $order = $Context->getEntity()->getInstance();


            $order->setState(2);
            $this->entityManager->flush();

$this->addFlash('notice',"<span style='color:green;'><strong>La commande ".$order->getReference().
    " est bien <u> en cours de préparation</u>.</strong></span>");
            $url = $this->crudUrlGenerator
                ->build()
                ->setController(OrderCrudController::class)
                ->setAction('index')
                ->generateUrl();

            return $this->redirect($url);
        }


    public function configureCrud(Crud $crud): Crud
    {
        return $crud->setDefaultSort(['id'=>'DESC']); // TODO: Change the autogenerated stub
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            DateTimeField::new('createdAt','Passée le'),
            TextField::new('user.getFullName','Utilisateur'),
            MoneyField::new('total','Total produit')->setCurrency('EUR'),
            TextEditorField::new('delivery','adresse de livraison')->onlyOnDetail(),
            TextField::new('CarrierName','Transporteur'),
            MoneyField::new('carrierPrice','Frais de port')->setCurrency('EUR'),
            ChoiceField::new('state')->setChoices([
                'Non payée' => 0,
                'Payée'=> 1,
                'Preparation en cours' => 2,
                'Livraison en cours' => 3
            ]),
            ArrayField::new('orderDetails','Produits achetés')->hideOnIndex(),
        ];
    }

}
